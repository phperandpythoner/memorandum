一、指针强化
1、指针也是一种数据类型，指针变量也是一种变量，和int a本质是一样的
	1)、指针变量也是一种变量，也有空间，32位程序大小为4字节，64位程序大小为8字节
	2)、*操作符，*相当于钥匙，通过*可以找到指针所指向的内存区域
	int a = 10;
	int *p = NULL;
	p = &a; //指针指向谁，就把谁的地址赋值给指针
	
	*p = 22; //*放=左边，给内存赋值，写内存
	int b = *p; // *放=右边，取内存的值，读内存
	
	3)、指针变量， 和指向的内存是两个不同的概念
	char *p = NULL;
	char buf[] = "abcdef";
	//改变指针变量的值
	p = buf;
	
	p = p+1; // 改变了指针变量的值，改变了指针的指向
	
	*p = 'm'; //改变指针指向的内存值，并不会影响到指针的值
	
	4)、写内存时，一定要确保内存可写
	char *buf2 = "asdfgghjhj"; //文字常量区，内存不可改
	//buf2[2] = '1'; //err
	char buf[] = "123456abc"; // 这种可以改，因为这个是放在栈区的
	
2、间接赋值（*p）是指针存在的最大意义
	1）间接赋值的三大条件
		a)两个变量
		b)建立关系
		c)通过*操作符进行间接赋值
		
		eg：
		1)
		int a;
		int *p; //a
		p = &a; //b
		*p = 100; //c
		
		2)
		int b;
		fun(&b); //两个变量之一：实参，给函数传参时，相当于建立关系
		
		void fun(int *p)两个变量之一：形参
		{
			*p = 100; //通过*操作符进行间接赋值
		}
		
	2)、如何定义合适类型的指针变量
	//某个变量的地址需要定义一个怎么样类型的变量保存
	//在这个类型的基础上加一个*
	int b;
	int *q = &b;
	int **t = &q;
	
	重要：如果想通过函数形参改变实参的值，必须传地址
	1、值传递，形参的任何修改不会影响到实参
	2、地址传递，形参（通过*操作符号）的任何修改会影响到实参
	
	用1级指针形参，去间接修改了0级指针*（实参）的值
	用2级指针形参，去间接修改了1级指针*（实参）的值
	用3级指针形参，去间接修改了2级指针*（实参）的值
	用n级指针形参，去间接修改了n-1级指针*（实参）的值
	
	eg:值传递
	int a = 10;
	fun(a);//值传递
	void fun(int b)
	{
		b = 20;
	}
	
	eg:地址传递
	int a = 10;
	fun(&a);
	void fun(int *p)
	{
		p = 20;
	}
	
3、栈区返回变量的值和变量的地址区别
	int fun()
	{
		int a = 10;
		return a;
	}
	
	int *fun()
	{
		int a = 10;
		return &a;
	}
	
	int *fun()
	{
		static int a = 10;
		return &a;
	}